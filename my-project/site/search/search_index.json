{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SMSOTP Authenticator The SMSOTP authenticator allows you to authenticate user via short messages through WSO2 IS. Getting started To get started with the authenticator, go to Configuring SMSOTP Authenticator Operations . Once you have completed your configurations, you can perform authentication with the SMSOTP authenticator. To download the authenticator and other artifacts, go to https://store.wso2.com/store/assets/isconnector/smsotp .","title":"Welcome"},{"location":"#smsotp-authenticator","text":"The SMSOTP authenticator allows you to authenticate user via short messages through WSO2 IS.","title":"SMSOTP Authenticator"},{"location":"#getting-started","text":"To get started with the authenticator, go to Configuring SMSOTP Authenticator Operations . Once you have completed your configurations, you can perform authentication with the SMSOTP authenticator. To download the authenticator and other artifacts, go to https://store.wso2.com/store/assets/isconnector/smsotp .","title":"Getting started"},{"location":"docs/smsotp/","text":"Deploying the Sample App This topic provides instructions on how to deploy the sample application (travelocity). You can download the travelocity.com.war file from here or you can build the latest travelocity application from here . Deploy this sample web app on a web container. Use the Apache Tomcat server to do this. If you have not downloaded Apache Tomcat already, download it from here . Tip: Since this sample is written based on Servlet 3.0, it needs to be deployed on Tomcat 7.x. * Copy the .war file into the webapps folder. For example, /apache-tomcat-\\ /webapps. 3. Start the Tomcat server. To check the sample application, navigate to http:// : /travelocity.com/index.jsp on your browser. For example, http://localhost:8080/travelocity.com/index.jsp. Note: It is recommended that you use a hostname that is not localhost to avoid browser errors. Modify the /etc/hosts entry in your machine to reflect this. Note that localhost is used throughout thisdocumentation as an example, but you must modify this when configuring these authenticators or connectors with this sample application.","title":"Home"},{"location":"docs/smsotp/#deploying-the-sample-app","text":"This topic provides instructions on how to deploy the sample application (travelocity). You can download the travelocity.com.war file from here or you can build the latest travelocity application from here . Deploy this sample web app on a web container. Use the Apache Tomcat server to do this. If you have not downloaded Apache Tomcat already, download it from here . Tip: Since this sample is written based on Servlet 3.0, it needs to be deployed on Tomcat 7.x. * Copy the .war file into the webapps folder. For example, /apache-tomcat-\\ /webapps. 3. Start the Tomcat server. To check the sample application, navigate to http:// : /travelocity.com/index.jsp on your browser. For example, http://localhost:8080/travelocity.com/index.jsp. Note: It is recommended that you use a hostname that is not localhost to avoid browser errors. Modify the /etc/hosts entry in your machine to reflect this. Note that localhost is used throughout thisdocumentation as an example, but you must modify this when configuring these authenticators or connectors with this sample application.","title":"Deploying the Sample App"},{"location":"docs/smsotp/2.0.13/","text":"Configuring CAS Inbound Authenticator This topic provides instructions on how to configure the CAS inbound authenticator and the WSO2 Identity Server and demonstrates this integration using a sample app (cas-client-webapp). This procedure was tested using Java 8. The current version of the CAS Inbound authenticator is not supported with a tenant user. CAS Version 1.0.2 Inbound Authenticator is supported by WSO2 Identity Server versions 5.2.0 and CAS Version 2.0.1 Inbound Authenticator is supported by WSO2 Identity Server versions 5.3.0. If you are using CAS authenticator version 2.0.2, go to the v2.0.2 tag of the identity-outbound-auth-cas GitHub repository to view the documentation See the following sections for more information on configuring this integration. /**/ Prerequisites Configuring cas-client-webapp Deploying CAS artifacts Configuring the service provider Testing the sample Prerequisites Download WSO2 Identity Server from the WSO2 Identity Server product page and install it by following the instructions in the Installing the Product topic. Download the sample CAS client webapp (cas-client-webapp.war) from https://github.com/wso2-docs/IS/tree/master/IS-Connector-Artifacts/CAS Download the CAS Version 1.0.2 Inbound Authenticator JAR from the store for this authenticator and CAS Version 2.0.1 Inbound Authenticator JAR from the store for this authenticator . If you want to upgrade the CAS Inbound Authenticator (.jar) in your existing IS pack, please refer upgrade instructions. The CAS login URL is required if you want to use it in your own app. It must be: https://:9443/identity/cas/login Configuring cas-client-webapp Generate Keystore to enable 'https' request in your web container (e.g., Tomcat). Use the following \"keytool\" command inside the \"web-container/bin\" (e.g., TOMCAT_HOME/bin ) directory to create a keystore with the self-signed certificate. During the keystore creation process, you need to assign a password and fill in the certificate\u2019s details. keytool -genkey -alias localhost -keyalg RSA -keystore \"PATH_TO_CREATE_KEYSTORE/KEYSTORE_NAME\". Tip : Here localhost is the same name as the machine's hostname. Add the following connector in the server.xml file in your web-container (e.g., TOMCAT_HOME /conf/server.xml ) xml Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"PATH_TO_CREATED_KEYSTORE/KEYSTORE_NAME\" keystorePass=\"KEYSTORE_PASSWORD\" / Tip : KEYSTORE_PASSWORD is the password you assigned to your keystore via the \"keytool\" command. To establish the trust between cas-client-webapp and CAS-Server (WSO2 IS), take the following steps: Go to the IS_HOME /repository/resources/security/ directory and execute the following command to create a certificate file for the wso2carbon JKS. keytool -export -alias wso2carbon -file wso2.crt -keystore wso2carbon.jks -storepass wso2carbon Inside the above directory use the following command to import the CAS server certificate ( wso2.crt ) into the system truststore of the CAS client. You will be prompted for the keystore password, which is by default changeit. keytool -import -alias wso2carbon -file wso2.crt -keystore PATH-TO-jre/lib/security/cacerts Deploying CAS artifacts Place the cas-client-webapp.war file into the webapps directory of the web-container (e.g., /webapps). Place the org.wso2.carbon.identity.sso.cas-1.0.2.jar file (for Identity Server 5.3.0, use the cas-2.0.1.jar file instead as described in the note below) into the /repository/components/dropins directory and restart the Identity Server. If you are using WSO2 Identity Server 5.3.0, make sure to take the WUM updated product since this feature needs some core fixes done to the product. Configuring the service provider Now, you are ready to configure WSO2 Identity Server by adding a new service provider. Run WSO2 Identity Server . Log in to the management console as an administrator. In the Identity section under the Main tab, click Add under Service Providers . Enter cas-client-webapp in the Service Provider Name text box and click Register . {width=\"644\" height=\"250\"} In the Inbound Authentication Configuration section, click CAS Configuration . Configure the Service Url : https://localhost:8443/cas-client-webapp/ Service URL refers to the URL of the application that the client is trying to access. Go to Claim Configuration and click Define Custom Claim Dialect to add the requested claims. (This is required to show requested claims as user attributes in the cas-client-webapp; otherwise, no attributes will be shown.) Add the Service Provider Claim name that corresponds to the Local Claim URI and mark it as Requested Claim. Click Update to save the changes. Now you have configured the service provider. Testing the sample To test the sample, navigate to https://[server-address]/cas-client-webapp/ in your browser (i.e., go to the following URL: https://localhost:8443/cas-client-webapp/ ). The basic authentication page appears. Use your IS username and password. If you have successfully logged in, you will see the following CAS Home page of cas-client-webapp with the authenticated user and user attributes. {width=\"947\" height=\"250\"} Attachments: {width=\"8\" height=\"8\"} serviceproviderr.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} signin.png (image/png) {width=\"8\" height=\"8\"} signin.png (image/png) {width=\"8\" height=\"8\"} success_login.png (image/png) {width=\"8\" height=\"8\"} aaaaa.png (image/png) {width=\"8\" height=\"8\"} bbbbb.png (image/png) {width=\"8\" height=\"8\"} Screenshot from 2016-10-31 14:10:46.png (image/png) {width=\"8\" height=\"8\"} 88888888888888888888888.png (image/png) {width=\"8\" height=\"8\"} image2017-8-24_4-42-23.png (image/png) {width=\"8\" height=\"8\"} Screenshot from 2017-09-12 16:54:28.png (image/png)","title":"Configuring CAS Inbound Authenticator"},{"location":"docs/smsotp/2.0.13/#configuring-cas-inbound-authenticator","text":"This topic provides instructions on how to configure the CAS inbound authenticator and the WSO2 Identity Server and demonstrates this integration using a sample app (cas-client-webapp). This procedure was tested using Java 8. The current version of the CAS Inbound authenticator is not supported with a tenant user. CAS Version 1.0.2 Inbound Authenticator is supported by WSO2 Identity Server versions 5.2.0 and CAS Version 2.0.1 Inbound Authenticator is supported by WSO2 Identity Server versions 5.3.0. If you are using CAS authenticator version 2.0.2, go to the v2.0.2 tag of the identity-outbound-auth-cas GitHub repository to view the documentation See the following sections for more information on configuring this integration. /**/ Prerequisites Configuring cas-client-webapp Deploying CAS artifacts Configuring the service provider Testing the sample","title":"Configuring CAS Inbound Authenticator"},{"location":"docs/smsotp/2.0.13/#prerequisites","text":"Download WSO2 Identity Server from the WSO2 Identity Server product page and install it by following the instructions in the Installing the Product topic. Download the sample CAS client webapp (cas-client-webapp.war) from https://github.com/wso2-docs/IS/tree/master/IS-Connector-Artifacts/CAS Download the CAS Version 1.0.2 Inbound Authenticator JAR from the store for this authenticator and CAS Version 2.0.1 Inbound Authenticator JAR from the store for this authenticator . If you want to upgrade the CAS Inbound Authenticator (.jar) in your existing IS pack, please refer upgrade instructions. The CAS login URL is required if you want to use it in your own app. It must be: https://:9443/identity/cas/login","title":"Prerequisites"},{"location":"docs/smsotp/2.0.13/#configuring-cas-client-webapp","text":"Generate Keystore to enable 'https' request in your web container (e.g., Tomcat). Use the following \"keytool\" command inside the \"web-container/bin\" (e.g., TOMCAT_HOME/bin ) directory to create a keystore with the self-signed certificate. During the keystore creation process, you need to assign a password and fill in the certificate\u2019s details. keytool -genkey -alias localhost -keyalg RSA -keystore \"PATH_TO_CREATE_KEYSTORE/KEYSTORE_NAME\". Tip : Here localhost is the same name as the machine's hostname. Add the following connector in the server.xml file in your web-container (e.g., TOMCAT_HOME /conf/server.xml ) xml Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"PATH_TO_CREATED_KEYSTORE/KEYSTORE_NAME\" keystorePass=\"KEYSTORE_PASSWORD\" / Tip : KEYSTORE_PASSWORD is the password you assigned to your keystore via the \"keytool\" command. To establish the trust between cas-client-webapp and CAS-Server (WSO2 IS), take the following steps: Go to the IS_HOME /repository/resources/security/ directory and execute the following command to create a certificate file for the wso2carbon JKS. keytool -export -alias wso2carbon -file wso2.crt -keystore wso2carbon.jks -storepass wso2carbon Inside the above directory use the following command to import the CAS server certificate ( wso2.crt ) into the system truststore of the CAS client. You will be prompted for the keystore password, which is by default changeit. keytool -import -alias wso2carbon -file wso2.crt -keystore PATH-TO-jre/lib/security/cacerts","title":"Configuring cas-client-webapp"},{"location":"docs/smsotp/2.0.13/#deploying-cas-artifacts","text":"Place the cas-client-webapp.war file into the webapps directory of the web-container (e.g., /webapps). Place the org.wso2.carbon.identity.sso.cas-1.0.2.jar file (for Identity Server 5.3.0, use the cas-2.0.1.jar file instead as described in the note below) into the /repository/components/dropins directory and restart the Identity Server. If you are using WSO2 Identity Server 5.3.0, make sure to take the WUM updated product since this feature needs some core fixes done to the product.","title":"Deploying CAS artifacts"},{"location":"docs/smsotp/2.0.13/#configuring-the-service-provider","text":"Now, you are ready to configure WSO2 Identity Server by adding a new service provider. Run WSO2 Identity Server . Log in to the management console as an administrator. In the Identity section under the Main tab, click Add under Service Providers . Enter cas-client-webapp in the Service Provider Name text box and click Register . {width=\"644\" height=\"250\"} In the Inbound Authentication Configuration section, click CAS Configuration . Configure the Service Url : https://localhost:8443/cas-client-webapp/ Service URL refers to the URL of the application that the client is trying to access. Go to Claim Configuration and click Define Custom Claim Dialect to add the requested claims. (This is required to show requested claims as user attributes in the cas-client-webapp; otherwise, no attributes will be shown.) Add the Service Provider Claim name that corresponds to the Local Claim URI and mark it as Requested Claim. Click Update to save the changes. Now you have configured the service provider.","title":"Configuring the service provider"},{"location":"docs/smsotp/2.0.13/#testing-the-sample","text":"To test the sample, navigate to https://[server-address]/cas-client-webapp/ in your browser (i.e., go to the following URL: https://localhost:8443/cas-client-webapp/ ). The basic authentication page appears. Use your IS username and password. If you have successfully logged in, you will see the following CAS Home page of cas-client-webapp with the authenticated user and user attributes. {width=\"947\" height=\"250\"}","title":"Testing the sample"},{"location":"docs/smsotp/2.0.13/#attachments","text":"{width=\"8\" height=\"8\"} serviceproviderr.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} inboundAuthenticationConfig.png (image/png) {width=\"8\" height=\"8\"} signin.png (image/png) {width=\"8\" height=\"8\"} signin.png (image/png) {width=\"8\" height=\"8\"} success_login.png (image/png) {width=\"8\" height=\"8\"} aaaaa.png (image/png) {width=\"8\" height=\"8\"} bbbbb.png (image/png) {width=\"8\" height=\"8\"} Screenshot from 2016-10-31 14:10:46.png (image/png) {width=\"8\" height=\"8\"} 88888888888888888888888.png (image/png) {width=\"8\" height=\"8\"} image2017-8-24_4-42-23.png (image/png) {width=\"8\" height=\"8\"} Screenshot from 2017-09-12 16:54:28.png (image/png)","title":"Attachments:"},{"location":"docs/smsotp/2.0.14/","text":"Pariterque ad dona pectora Suis ne Lorem markdownum, montibus cumque preces? Et ut tertius cara. Per aula Aeacon rite, et se tua Piraeaque narrat Cupido, dum interea pasci, adfusique cuncta? Exasperat impetus conpositas de Niobe sub primis nullum bracchia cupiens, pereunt, in Persea; vero mihi. Formidine nam fors ore; modis unus iustius Aegyptia: Quae est ad tendens, fortuna! Sanguisque et petit spectabat cornibus rates ad nec albentes reddidit. Tellus damnasse bidentum amisso. Toro vix magis palearia silva. Quae fratri : longa ante tamen, signorum , et, nox: invitum cecidere geminasque. Tecum Phorbas arvis patriam et ille gravitate circuit paene summo cuncta. Quidem glomeravit corpore rebus? Dignas nunc perenni numerum, bello mora laboro, dextro sparsit tempore dentes. if (api = device_non / aspNative) { google_crt.dayCloudReciprocal += thick; lock_dma.dvr_ppc_flood(hypermedia_runtime, -3, 567150 * -2); } else { touchscreen_bios_format = word; dialog = orientationBarebones; } index = 3 / excel + cyclePpgaApache; screenshot_drive.schemaCharacter += alu(optical); Arce morsu vestros mandarat crearat sagittas dotem Venit et inpetus et instabilemque coniunx occumbere frondes tempus sinitis, ne fatorum dea beatior adspice discordia sonus. Prementem conspecta longos quaeque, subit vulgusque pleni arboribus abdidit quantaque quaque aura frustra: ire favillam. Aevi pendenti locus tantummodo Achaica inclita: erat urgetque res. Capillos ignes praestant nunc. Intortos duro summaque inter; nova illi nunc constituunt vulneris crimina, ex nunc radicibus super, loqui. Videt hora tali; est Saturno maiusque simul requirit turris haec sua serpentis. Huc quo opem cupioque auctor conciderant, solita limite veni latebra moderamine nubila tacitaque dixerat! At condidit quod tulit Capessamus mille cum laurea pectora Respondere virgo per fratres falsa Naupliades florem Stimulis me lapis pectusque duroque Quod vestes circumstantes septem somnis Quam progenies nec Silices memoranda inclinarat mutarent, non, Polyxena et iubar urbesque versarunt et ferro, saepe ora. Terga Haud vos, illum dant, virginem lunam ingreditur. Manu sidera silva quin Giganteis tremore. Cui sistrum pater mutavit et partu at Procnes classis axem: obvertere armata victa: Capys . Rostro stamina melius sese de chlamydemque certe virtus posuisset. Tum sacra deam coniecta curribus in nives: datque aequora haut. Est captivarum male spiritus testatum ipsa, modo est adhuc quaerit petendo. In examina rubore umor primo ex loci et fraxineam, dextro odium, licet .","title":"Pariterque ad dona pectora"},{"location":"docs/smsotp/2.0.14/#pariterque-ad-dona-pectora","text":"","title":"Pariterque ad dona pectora"},{"location":"docs/smsotp/2.0.14/#suis-ne","text":"Lorem markdownum, montibus cumque preces? Et ut tertius cara. Per aula Aeacon rite, et se tua Piraeaque narrat Cupido, dum interea pasci, adfusique cuncta? Exasperat impetus conpositas de Niobe sub primis nullum bracchia cupiens, pereunt, in Persea; vero mihi. Formidine nam fors ore; modis unus iustius Aegyptia: Quae est ad tendens, fortuna! Sanguisque et petit spectabat cornibus rates ad nec albentes reddidit. Tellus damnasse bidentum amisso. Toro vix magis palearia silva. Quae fratri : longa ante tamen, signorum , et, nox: invitum cecidere geminasque. Tecum Phorbas arvis patriam et ille gravitate circuit paene summo cuncta. Quidem glomeravit corpore rebus? Dignas nunc perenni numerum, bello mora laboro, dextro sparsit tempore dentes. if (api = device_non / aspNative) { google_crt.dayCloudReciprocal += thick; lock_dma.dvr_ppc_flood(hypermedia_runtime, -3, 567150 * -2); } else { touchscreen_bios_format = word; dialog = orientationBarebones; } index = 3 / excel + cyclePpgaApache; screenshot_drive.schemaCharacter += alu(optical);","title":"Suis ne"},{"location":"docs/smsotp/2.0.14/#arce-morsu-vestros-mandarat-crearat-sagittas-dotem","text":"Venit et inpetus et instabilemque coniunx occumbere frondes tempus sinitis, ne fatorum dea beatior adspice discordia sonus. Prementem conspecta longos quaeque, subit vulgusque pleni arboribus abdidit quantaque quaque aura frustra: ire favillam. Aevi pendenti locus tantummodo Achaica inclita: erat urgetque res. Capillos ignes praestant nunc. Intortos duro summaque inter; nova illi nunc constituunt vulneris crimina, ex nunc radicibus super, loqui. Videt hora tali; est Saturno maiusque simul requirit turris haec sua serpentis. Huc quo opem cupioque auctor conciderant, solita limite veni latebra moderamine nubila tacitaque dixerat! At condidit quod tulit Capessamus mille cum laurea pectora Respondere virgo per fratres falsa Naupliades florem Stimulis me lapis pectusque duroque Quod vestes circumstantes septem somnis Quam progenies nec Silices memoranda inclinarat mutarent, non, Polyxena et iubar urbesque versarunt et ferro, saepe ora. Terga Haud vos, illum dant, virginem lunam ingreditur. Manu sidera silva quin Giganteis tremore. Cui sistrum pater mutavit et partu at Procnes classis axem: obvertere armata victa: Capys . Rostro stamina melius sese de chlamydemque certe virtus posuisset. Tum sacra deam coniecta curribus in nives: datque aequora haut. Est captivarum male spiritus testatum ipsa, modo est adhuc quaerit petendo. In examina rubore umor primo ex loci et fraxineam, dextro odium, licet .","title":"Arce morsu vestros mandarat crearat sagittas dotem"},{"location":"docs/smsotp/2.0.15/","text":"Configuring Multi-factor Authentication using SMSOTP This topic provides instructions on how to configure the SMSOTP connector and the WSO2 Identity Server to integrate using a sample app. This is configured so that SMSOTP is a second authentication factor for the sample application. See the following sections for more information. To know more about the WSO2 Identity Server versions supported by this connector, see the WSO2 Store . This connector is supported by default from WSO2 Identity Server 5.3.0 onwards. For more information, see Configuring SMS OTP . Deploying SMSOTP artifacts Deploying travelocity.com sample Configuring the identity provider Configuring the service provider Configuring claims Testing the sample Note: If you have a older version, upgrade the connector and artifacts to the latest version from the connector store. Deploying SMSOTP artifacts The artifacts can be obtained from the store for this authenticator . 1. Place the smsotpauthenticationendpoint.war file into the /repository/deployment/server/webapps directory. 2. Place the org.wso2.carbon.extension.identity.authenticator.smsotp.connector-2.0.13.jar file into the /repository/components/dropins directory. --- **NOTE :** If you want to upgrade the SMSOTP Authenticator in your existing IS pack, please refer [upgrade instructions](https://docs.wso2.com/display/ISCONNECTORS/Authenticator+Upgrade+Instructions). --- Add the following configurations in the /repository/conf/identity/application-authentication.xml file under the section. AuthenticatorConfig name=\"SMSOTP\" enabled=\"true\" Parameter name=\"SMSOTPAuthenticationEndpointURL\" https://localhost:9443/smsotpauthenticationendpoint/smsotp.jsp /Parameter Parameter name=\"SMSOTPAuthenticationEndpointErrorPage\" https://localhost:9443/smsotpauthenticationendpoint/smsotpError.jsp /Parameter Parameter name=\"MobileNumberRegPage\" https://localhost:9443/smsotpauthenticationendpoint/mobile.jsp /Parameter Parameter name=\"RetryEnable\" true /Parameter Parameter name=\"ResendEnable\" true /Parameter Parameter name=\"BackupCode\" true /Parameter Parameter name=\"SMSOTPEnableByUserClaim\" false /Parameter Parameter name=\"SMSOTPMandatory\" false /Parameter Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" primary /Parameter Parameter name=\"CaptureAndUpdateMobileNumber\" true /Parameter Parameter name=\"SendOTPDirectlyToMobile\" false /Parameter Parameter name=\"EnableAlphanumericToken\" true /Parameter Parameter name=\"TokenExpiryTime\" 30 /Parameter Parameter name=\"TokenLength\" 8 /Parameter /AuthenticatorConfig The following table includes the definition of the parameters and the various values you can configure. Value Description SMSOTPMandatory If the value is true, the second step will be enabled by the admin. The user cannot be authenticated without SMS OTP authentication. This parameter is used for both super tenant and tenant in the configuration. The value can be true or false. screenUserAttribute If you need to show n digits of mobile number or any other user attribute value in UI, This parameter will be used to pick the claim URI. CaptureAndUpdateMobileNumber In SMSOTPMandatory case, If user forgets to update the mobile number in specific user's profile and this property is true, then user can update a mobile claim with value in authentication time (If it is first login) and get the mobile number from user's profile to send OTP. This update functionality will happen in the first login only. Once user updates the mobile number, for the next login mobile number will be taken the updated mobile number from specific user's profile. SendOTPDirectlyToMobile In SMSOTPMandatory case, If user does not exist in user store and If admin enable\"SendOTPDirectlyToMobile\" as true, then the user can enter the mobile number in authentication time in a mobile number request page and the OTP will directly send to that mobile number. BackupCode The backup code is used instead of the actual SMS code. The value can be true or false. If you do not want backup codes, set this as false. You can skip the steps 6.b and 7 in the Configuring claims section. noOfDigits The number of digits of claim value to show in UI. That is,if the mobile claim selected for the property \"screenUserAttribute\" and if the noOfDigits property has the value 4, then we can show the mobile number according to the property \"order\". If the order is backward, then we can show the last 4 digits of mobile claim in the UI. order The order whether first or last number of n digits. The possible value for this property is backward or forward. secondaryUserstore The user store configuration is maintained per tenant as comma separated values. For example, jdbc, abc, xyz . usecase This field can take one of the following values: local, association, userAttribute, subjectUri. If you do not specify any usecase, the default value is local. See below for more details. SMSOTPEnableByUserClaim This field makes it possible to disable the 'SMS OTP disabling byuser' functionality. The value can be true or false. If the value is true, the user can enable and disable the SMS OTP according to what the admin selects (SMSOTPMandatory parameter value). If this property is false, then you can skip the steps 6.a and 7 in the Configuring claims section ResendEnable This parameter makes it possible to resend the code in the same page if user applies the wrong code. This value can be true or false. EnableAlphanumericToken If the value is true, the generated token will be a alphanumeric value. Else it will generate a numeric token. TokenExpiryTime This parameter makes it possible to set the expiry time of the OTP token. TokenLength This parameter makes it possible to set the length of the OTP token. An admin can change the priority of the SMSOTP authenticator by changing the SMSOTPMandatory value (true or false). * If Admin specify that SMSOTP is mandatory ( Parameter name=\"SMSOTPMandatory\" true /Parameter ) , then you must enable SMSOTP in the user\u2019s profile by adding claim value true in order to authenticate the user. If this is not done, the SMSOTP error page appears. * If Admin specify that SMSOTP is optional ( Parameter name=\"SMSOTPMandatory\" false /Parameter ) and you enable SMSOTP in the user's profile, then the authenticator will allow the user to login with SMSOTP authentication as a second step (multi-step authentication). If Admin specifies that SMSOTP is optional and you do not enable SMSOTP in the user's profile, the SMSOTP authenticator will proceed to log the user in as the first step (basic authentication). The first step may be local authenticator (basic) or a federated authenticator (e.g., Facebook, Twitter, etc.) . In federated authenticator support in first step, the following parameters are used according to the scenario. Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" jdbc /Parameter The usecase value can be local, association, userAttribute or subjectUri. local This is based on the federated username. This is the default. You must set the federated username in the localuserstore. Basically, the federated username must be the same as the local username. association The federated username must be associated with the local account in advance in the Dashboard. So the local username is retrieved from the association. To associate the user, log into the end user dashboard and go to Associated Account by clicking View details . userAttribute The name of the federatedauthenticator's user attribute. That is,the local user namewhich is contained in a federated user's attribute. When using this, add the following parameter under the section in the /repository/conf/identity/application-authentication.xml file and put the value (e.g., email, screen_name, id, etc.). Parameter name=\"userAttribute\" email /Parameter If you use, OpenID Connect supported authenticators such as LinkedIn, Foursquare, etc., or in the case of multiple social login options as the first step and SMSOTP as secondstep , you need to add similar configuration for the specific authenticator in the /repository/conf/identity/application-authentication.xml file under the section as follows (the following shows the configuration forFoursquare,LinkedIn and Facebook authenticator respectively).Inside the AuthenticatorConfig (i.e., Foursquare), add the specific userAttribute with a prefix of the (current step) authenticator name (i.e., SMSOTP-userAttribute). AuthenticatorConfig name=\"Foursquare\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/foursquare/claims/email /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"LinkedIn\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/linkedin/claims/emailAddress /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"FacebookAuthenticator\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" email /Parameter /AuthenticatorConfig Likewise, you can add the AuthenticatorConfig forAmazon,Google,Twitterand Instagram with relevant values. subjectUri When configuring the federated authenticator, select the attribute in the subject identifier under the service provider section in UI, this is used as the username of the SMSOTP authenticator. If you use the secondary userstore, enter all the userstore values for the particular tenant as comma separated values. The user store configuration is maintained per tenant: * If you use a super tenant, put all the parameter values into the IS_HOME /repository/conf/identity/application-authentication.xml file under the AuthenticatorConfigs section. * If you use a tenant, upload the same XML file (application-authentication.xml) into a specific registry location (/_system/governance/SMSOTP). Create the collection named SMSOTP, add the resource and upload the application-authentication.xml file into theregistry). While doing the authentication, first it checks whether there is an XML file uploaded to the registry. If that is so, it reads it from the registry but does not take the local file. If there is no file in the registry, then it only takes the property values from the local file. This is how theuserstore configuration is maintained per tenant. You can use the registry or local file to get the property values. If you need to show last n digits of mobile number or any other user attribute value in UI, the following parameters can be used according to the scenario. For example, we can use the following parameters to get last 4 digits from mobile number. Parameter name=\"screenUserAttribute\" http://wso2.org/claims/mobile /Parameter Parameter name=\"noOfDigits\" 4 /Parameter Parameter name=\"order\" backward /Parameter The SMS provider is the entity that is used to send the SMS. The SMSOTP connector has been configured such that it can be used with most types of SMS APIs. Some use the GET method with the client secret and API Key encoded in the URL (e.g., Nexmo), while some may use the POST method when sending the values in the headers and the message and telephone number in the payload (e.g., Clickatell). Note that this could change significantly between different SMS providers. The configuration of the connector in the identity provider would also change based on this. Deploying travelocity.com sample The next step is to deploy the sample app in order to use it in this scenario. Once this is done, the next step is to configure the WSO2 Identity Server by adding an identity provider and a service provider . Configuring the identity provider Now you have to configure WSO2 Identity Server by adding a new identity provider . Download the WSO2 Identity Server from here and run it . Download the certificate of the SMS provider. Go to the link (eg:- https://www.nexmo.com) in your browser, and then click the HTTPS trust icon on the address bar (e.g., the padlock next to the URL in Chrome) Import that certificate into the IS client keystore. keytool -importcert -file -keystore /repository/resources/security/client-truststore.jks -alias \"Nexmo\" Default client-truststore.jks password is \"wso2carbon\" Log into the management console as an administrator. In the Identity section under the Main tab of the management console , click Add under Identity Providers . Give a suitable name (e.g., SMSOTP) as the Identity Provider Name . Go to the SMSOTP Configuration under Federated Authenticators . Select both checkboxes to Enable SMSOTP Authenticator and make it the Default . Enter the SMS URL and the HTTP Method used (e.g., GET or POST). Include the headers and payload if the API uses any. If the text message and the phone number are passed as parameters in any field, then include them as $ctx.num and $ctx.msg respectively. You must also enter the HTTP Response Code the SMS service provider sends when the API is successfully called. Nexmo API and Bulksms API send 200 as the code, while Clickatell and Plivo send 202. If this value is unknown, leave it blank and the connector checks if the response is 200, 201 or 202. Note : If Nexmo is used as the SMS provider, * Go to https://dashboard.nexmo.com/sign-up and click free signup and register. * Under API Settings in Settings , copy and save the API key and Secret. * The Nexmo API requires the parameters to be encoded in the URL, so the SMS URL would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://rest.nexmo.com/sms/json?api_key=#### api_secret=##### from=NEXMO to= $ctx.num text= $ctx.msg | | **HTTP Method** | GET | Note : If Clickatell is used as the SMS provider, * Go to https://secure.clickatell.com/#/login and create an account. * The auth token is provided when you register with Clickatell. * Clickatell uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.clickatell.com/rest/message | | **HTTP Method** | POST | | **HTTP Headers** | X-Version: 1,Authorization: bearer ####,Accept: application/json,Content-Type: application/json | | **HTTP Payload** | {\"text\":\" $ctx.msg \",\"to\":[\" $ctx.num \"]} | Note : If Plivo is used as the SMS provider, * Sign up for a free Plivo trial account . * Phone numbers must be verified at the Sandbox Numbers page (add at least two numbers and verify them). * The Plivo API is authenticated with Basic Auth using your AUTH ID and AUTH TOKEN, Your Plivo AUTH ID and AUTH TOKEN can be found when you log in to your dashboard . * Plivo uses a POST method with headers, and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.plivo.com/v1/Account/{auth_id}/Message/ | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic ####, Content-Type: application/json | | **HTTP Payload** | {\"src\":\"+94#######\",\"dst\":\"$ctx.num\",\"text\":\"$ctx.msg\"} | Note : If Bulksms is used as the SMS provider, * Go to https://www2.bulksms.com/login.mc and create an account. * While registering the account, verify your mobile number and click Claim to get free credits. ![alt text](images/bulkSms.png) Bulksms API authentication is performed by providing username and password request parameters. Bulksms uses a POST method and the required parameters are to be encoded in the URL. So the fields would be as follows. SMS URL https://bulksms.vsms.net/eapi/submission/send_sms/2/2.0?username=####### password=##### message=$ctx.msg msisdn=$ctx.num HTTP Method POST HTTP Headers Content-Type: application/x-www-form-urlencoded Note : If Twilio is used as the SMS provider, * Go to https://www.twilio.com/try-twilio and create an account. * While registering the account, verify your mobile number and click on console home https://www.twilio.com/console to get free credits (Account SID and Auth Token) . * Twilio uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.twilio.com/2010-04-01/Accounts/{AccountSID}/SMS/Messages.json | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic base64{AccountSID:AuthToken} | | **HTTP Payload** | Body=$ctx.msg To=$ctx.num From={FROM_NUM} | Click Update and you have now added and configured the Identity provider. Configuring the service provider Return to the management console. In the Identity section under the Main tab, click Add under Service Providers . Enter travelocity.com in the Service Provider Name text box and click Register . In the Inbound Authentication Configuration section, click Configure under the SAML2 Web SSO Configuration section. Now set the configuration as follows: Issuer : travelocity.com Assertion Consumer URL : http://localhost:8080/travelocity.com/home.jsp Select the following check-boxes: Enable Response Signing Enable Single Logout Enable Attribute Profile Include Attributes in the Response Always Click Update to save the changes. Now you will be sent back to the Service Providers page. Go to Claim configuration and select the mobile claim. Go to Local and Outbound Authentication Configuration section. Select the Advanced configuration radio button option. Add the basic authentication as first step and SMSOTP authentication as a second step. Adding basic authentication as a first step ensures that the first step of authentication will be done using the user's credentials that are configured with the WSO2 Identity Server. SMSOTP is a second step that adds another layer of authentication and security. Alternatively, federated authentication as the first step and SMSOTP authentication as the second step and click Update to save the changes. Configuring claims Select List under Users and Roles in the IS Management Console. Go to the User Profile and update the mobile number (This number must be registered with Nexmo, if you are using Nexmo API in order to send SMS). Note : If you wish to use the backup codes to authenticate, you need to add the following claim mentioned in Step 7 , otherwise you can leave it. 3. In the Main menu, click Add under Claims . 4. Click Add New Claim . 5. Select the Dialect from the dropdown provided and enter the required information. 6. Add the following user claims under 'http://wso2.org/claims'. a. Add the claim Uri - http://wso2.org/claims/identity/smsotp_disabled. This is an optional claim for SMSOTP. ![alt text](images/disableSmsOtp.png) b. Add the claim Uri - http://wso2.org/claims/otpbackupcodes The backup code claim is an optional. ![alt text](images/backupCodes.png) Go to Users \u2192 admin \u2192User Profile and update the Backup codes and user can disable SMS OTP by clicking \"Disable SMS OTP\". Testing the sample To test the sample, go to the following URL: http://localhost:8080/travelocity.com Click the link to log in with SAML from WSO2 Identity Server. The basic authentication page will be visible. Use your WSO2 Identity Server credentials to sign in. You will get a token to your mobile phone.Type the code to authenticate, You will be taken to the home page of the travelocity.com app Note : In case, If you forget the mobile phone number or do not have access to it, you can use the backup codes to authenticate and you will be taken to the home page of the travelocity.com application.","title":"Configuring Multi-factor Authentication using SMSOTP"},{"location":"docs/smsotp/2.0.15/#configuring-multi-factor-authentication-using-smsotp","text":"This topic provides instructions on how to configure the SMSOTP connector and the WSO2 Identity Server to integrate using a sample app. This is configured so that SMSOTP is a second authentication factor for the sample application. See the following sections for more information. To know more about the WSO2 Identity Server versions supported by this connector, see the WSO2 Store . This connector is supported by default from WSO2 Identity Server 5.3.0 onwards. For more information, see Configuring SMS OTP . Deploying SMSOTP artifacts Deploying travelocity.com sample Configuring the identity provider Configuring the service provider Configuring claims Testing the sample Note: If you have a older version, upgrade the connector and artifacts to the latest version from the connector store.","title":"Configuring Multi-factor Authentication using SMSOTP"},{"location":"docs/smsotp/2.0.15/#deploying-smsotp-artifacts","text":"The artifacts can be obtained from the store for this authenticator . 1. Place the smsotpauthenticationendpoint.war file into the /repository/deployment/server/webapps directory. 2. Place the org.wso2.carbon.extension.identity.authenticator.smsotp.connector-2.0.13.jar file into the /repository/components/dropins directory. --- **NOTE :** If you want to upgrade the SMSOTP Authenticator in your existing IS pack, please refer [upgrade instructions](https://docs.wso2.com/display/ISCONNECTORS/Authenticator+Upgrade+Instructions). --- Add the following configurations in the /repository/conf/identity/application-authentication.xml file under the section. AuthenticatorConfig name=\"SMSOTP\" enabled=\"true\" Parameter name=\"SMSOTPAuthenticationEndpointURL\" https://localhost:9443/smsotpauthenticationendpoint/smsotp.jsp /Parameter Parameter name=\"SMSOTPAuthenticationEndpointErrorPage\" https://localhost:9443/smsotpauthenticationendpoint/smsotpError.jsp /Parameter Parameter name=\"MobileNumberRegPage\" https://localhost:9443/smsotpauthenticationendpoint/mobile.jsp /Parameter Parameter name=\"RetryEnable\" true /Parameter Parameter name=\"ResendEnable\" true /Parameter Parameter name=\"BackupCode\" true /Parameter Parameter name=\"SMSOTPEnableByUserClaim\" false /Parameter Parameter name=\"SMSOTPMandatory\" false /Parameter Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" primary /Parameter Parameter name=\"CaptureAndUpdateMobileNumber\" true /Parameter Parameter name=\"SendOTPDirectlyToMobile\" false /Parameter Parameter name=\"EnableAlphanumericToken\" true /Parameter Parameter name=\"TokenExpiryTime\" 30 /Parameter Parameter name=\"TokenLength\" 8 /Parameter /AuthenticatorConfig The following table includes the definition of the parameters and the various values you can configure. Value Description SMSOTPMandatory If the value is true, the second step will be enabled by the admin. The user cannot be authenticated without SMS OTP authentication. This parameter is used for both super tenant and tenant in the configuration. The value can be true or false. screenUserAttribute If you need to show n digits of mobile number or any other user attribute value in UI, This parameter will be used to pick the claim URI. CaptureAndUpdateMobileNumber In SMSOTPMandatory case, If user forgets to update the mobile number in specific user's profile and this property is true, then user can update a mobile claim with value in authentication time (If it is first login) and get the mobile number from user's profile to send OTP. This update functionality will happen in the first login only. Once user updates the mobile number, for the next login mobile number will be taken the updated mobile number from specific user's profile. SendOTPDirectlyToMobile In SMSOTPMandatory case, If user does not exist in user store and If admin enable\"SendOTPDirectlyToMobile\" as true, then the user can enter the mobile number in authentication time in a mobile number request page and the OTP will directly send to that mobile number. BackupCode The backup code is used instead of the actual SMS code. The value can be true or false. If you do not want backup codes, set this as false. You can skip the steps 6.b and 7 in the Configuring claims section. noOfDigits The number of digits of claim value to show in UI. That is,if the mobile claim selected for the property \"screenUserAttribute\" and if the noOfDigits property has the value 4, then we can show the mobile number according to the property \"order\". If the order is backward, then we can show the last 4 digits of mobile claim in the UI. order The order whether first or last number of n digits. The possible value for this property is backward or forward. secondaryUserstore The user store configuration is maintained per tenant as comma separated values. For example, jdbc, abc, xyz . usecase This field can take one of the following values: local, association, userAttribute, subjectUri. If you do not specify any usecase, the default value is local. See below for more details. SMSOTPEnableByUserClaim This field makes it possible to disable the 'SMS OTP disabling byuser' functionality. The value can be true or false. If the value is true, the user can enable and disable the SMS OTP according to what the admin selects (SMSOTPMandatory parameter value). If this property is false, then you can skip the steps 6.a and 7 in the Configuring claims section ResendEnable This parameter makes it possible to resend the code in the same page if user applies the wrong code. This value can be true or false. EnableAlphanumericToken If the value is true, the generated token will be a alphanumeric value. Else it will generate a numeric token. TokenExpiryTime This parameter makes it possible to set the expiry time of the OTP token. TokenLength This parameter makes it possible to set the length of the OTP token. An admin can change the priority of the SMSOTP authenticator by changing the SMSOTPMandatory value (true or false). * If Admin specify that SMSOTP is mandatory ( Parameter name=\"SMSOTPMandatory\" true /Parameter ) , then you must enable SMSOTP in the user\u2019s profile by adding claim value true in order to authenticate the user. If this is not done, the SMSOTP error page appears. * If Admin specify that SMSOTP is optional ( Parameter name=\"SMSOTPMandatory\" false /Parameter ) and you enable SMSOTP in the user's profile, then the authenticator will allow the user to login with SMSOTP authentication as a second step (multi-step authentication). If Admin specifies that SMSOTP is optional and you do not enable SMSOTP in the user's profile, the SMSOTP authenticator will proceed to log the user in as the first step (basic authentication). The first step may be local authenticator (basic) or a federated authenticator (e.g., Facebook, Twitter, etc.) . In federated authenticator support in first step, the following parameters are used according to the scenario. Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" jdbc /Parameter The usecase value can be local, association, userAttribute or subjectUri. local This is based on the federated username. This is the default. You must set the federated username in the localuserstore. Basically, the federated username must be the same as the local username. association The federated username must be associated with the local account in advance in the Dashboard. So the local username is retrieved from the association. To associate the user, log into the end user dashboard and go to Associated Account by clicking View details . userAttribute The name of the federatedauthenticator's user attribute. That is,the local user namewhich is contained in a federated user's attribute. When using this, add the following parameter under the section in the /repository/conf/identity/application-authentication.xml file and put the value (e.g., email, screen_name, id, etc.). Parameter name=\"userAttribute\" email /Parameter If you use, OpenID Connect supported authenticators such as LinkedIn, Foursquare, etc., or in the case of multiple social login options as the first step and SMSOTP as secondstep , you need to add similar configuration for the specific authenticator in the /repository/conf/identity/application-authentication.xml file under the section as follows (the following shows the configuration forFoursquare,LinkedIn and Facebook authenticator respectively).Inside the AuthenticatorConfig (i.e., Foursquare), add the specific userAttribute with a prefix of the (current step) authenticator name (i.e., SMSOTP-userAttribute). AuthenticatorConfig name=\"Foursquare\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/foursquare/claims/email /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"LinkedIn\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/linkedin/claims/emailAddress /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"FacebookAuthenticator\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" email /Parameter /AuthenticatorConfig Likewise, you can add the AuthenticatorConfig forAmazon,Google,Twitterand Instagram with relevant values. subjectUri When configuring the federated authenticator, select the attribute in the subject identifier under the service provider section in UI, this is used as the username of the SMSOTP authenticator. If you use the secondary userstore, enter all the userstore values for the particular tenant as comma separated values. The user store configuration is maintained per tenant: * If you use a super tenant, put all the parameter values into the IS_HOME /repository/conf/identity/application-authentication.xml file under the AuthenticatorConfigs section. * If you use a tenant, upload the same XML file (application-authentication.xml) into a specific registry location (/_system/governance/SMSOTP). Create the collection named SMSOTP, add the resource and upload the application-authentication.xml file into theregistry). While doing the authentication, first it checks whether there is an XML file uploaded to the registry. If that is so, it reads it from the registry but does not take the local file. If there is no file in the registry, then it only takes the property values from the local file. This is how theuserstore configuration is maintained per tenant. You can use the registry or local file to get the property values. If you need to show last n digits of mobile number or any other user attribute value in UI, the following parameters can be used according to the scenario. For example, we can use the following parameters to get last 4 digits from mobile number. Parameter name=\"screenUserAttribute\" http://wso2.org/claims/mobile /Parameter Parameter name=\"noOfDigits\" 4 /Parameter Parameter name=\"order\" backward /Parameter The SMS provider is the entity that is used to send the SMS. The SMSOTP connector has been configured such that it can be used with most types of SMS APIs. Some use the GET method with the client secret and API Key encoded in the URL (e.g., Nexmo), while some may use the POST method when sending the values in the headers and the message and telephone number in the payload (e.g., Clickatell). Note that this could change significantly between different SMS providers. The configuration of the connector in the identity provider would also change based on this.","title":"Deploying SMSOTP artifacts"},{"location":"docs/smsotp/2.0.15/#deploying-travelocitycom-sample","text":"The next step is to deploy the sample app in order to use it in this scenario. Once this is done, the next step is to configure the WSO2 Identity Server by adding an identity provider and a service provider .","title":"Deploying travelocity.com sample"},{"location":"docs/smsotp/2.0.15/#configuring-the-identity-provider","text":"Now you have to configure WSO2 Identity Server by adding a new identity provider . Download the WSO2 Identity Server from here and run it . Download the certificate of the SMS provider. Go to the link (eg:- https://www.nexmo.com) in your browser, and then click the HTTPS trust icon on the address bar (e.g., the padlock next to the URL in Chrome) Import that certificate into the IS client keystore. keytool -importcert -file -keystore /repository/resources/security/client-truststore.jks -alias \"Nexmo\" Default client-truststore.jks password is \"wso2carbon\" Log into the management console as an administrator. In the Identity section under the Main tab of the management console , click Add under Identity Providers . Give a suitable name (e.g., SMSOTP) as the Identity Provider Name . Go to the SMSOTP Configuration under Federated Authenticators . Select both checkboxes to Enable SMSOTP Authenticator and make it the Default . Enter the SMS URL and the HTTP Method used (e.g., GET or POST). Include the headers and payload if the API uses any. If the text message and the phone number are passed as parameters in any field, then include them as $ctx.num and $ctx.msg respectively. You must also enter the HTTP Response Code the SMS service provider sends when the API is successfully called. Nexmo API and Bulksms API send 200 as the code, while Clickatell and Plivo send 202. If this value is unknown, leave it blank and the connector checks if the response is 200, 201 or 202. Note : If Nexmo is used as the SMS provider, * Go to https://dashboard.nexmo.com/sign-up and click free signup and register. * Under API Settings in Settings , copy and save the API key and Secret. * The Nexmo API requires the parameters to be encoded in the URL, so the SMS URL would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://rest.nexmo.com/sms/json?api_key=#### api_secret=##### from=NEXMO to= $ctx.num text= $ctx.msg | | **HTTP Method** | GET | Note : If Clickatell is used as the SMS provider, * Go to https://secure.clickatell.com/#/login and create an account. * The auth token is provided when you register with Clickatell. * Clickatell uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.clickatell.com/rest/message | | **HTTP Method** | POST | | **HTTP Headers** | X-Version: 1,Authorization: bearer ####,Accept: application/json,Content-Type: application/json | | **HTTP Payload** | {\"text\":\" $ctx.msg \",\"to\":[\" $ctx.num \"]} | Note : If Plivo is used as the SMS provider, * Sign up for a free Plivo trial account . * Phone numbers must be verified at the Sandbox Numbers page (add at least two numbers and verify them). * The Plivo API is authenticated with Basic Auth using your AUTH ID and AUTH TOKEN, Your Plivo AUTH ID and AUTH TOKEN can be found when you log in to your dashboard . * Plivo uses a POST method with headers, and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.plivo.com/v1/Account/{auth_id}/Message/ | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic ####, Content-Type: application/json | | **HTTP Payload** | {\"src\":\"+94#######\",\"dst\":\"$ctx.num\",\"text\":\"$ctx.msg\"} | Note : If Bulksms is used as the SMS provider, * Go to https://www2.bulksms.com/login.mc and create an account. * While registering the account, verify your mobile number and click Claim to get free credits. ![alt text](images/bulkSms.png) Bulksms API authentication is performed by providing username and password request parameters. Bulksms uses a POST method and the required parameters are to be encoded in the URL. So the fields would be as follows. SMS URL https://bulksms.vsms.net/eapi/submission/send_sms/2/2.0?username=####### password=##### message=$ctx.msg msisdn=$ctx.num HTTP Method POST HTTP Headers Content-Type: application/x-www-form-urlencoded Note : If Twilio is used as the SMS provider, * Go to https://www.twilio.com/try-twilio and create an account. * While registering the account, verify your mobile number and click on console home https://www.twilio.com/console to get free credits (Account SID and Auth Token) . * Twilio uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.twilio.com/2010-04-01/Accounts/{AccountSID}/SMS/Messages.json | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic base64{AccountSID:AuthToken} | | **HTTP Payload** | Body=$ctx.msg To=$ctx.num From={FROM_NUM} | Click Update and you have now added and configured the Identity provider.","title":"Configuring the identity provider"},{"location":"docs/smsotp/2.0.15/#configuring-the-service-provider","text":"Return to the management console. In the Identity section under the Main tab, click Add under Service Providers . Enter travelocity.com in the Service Provider Name text box and click Register . In the Inbound Authentication Configuration section, click Configure under the SAML2 Web SSO Configuration section. Now set the configuration as follows: Issuer : travelocity.com Assertion Consumer URL : http://localhost:8080/travelocity.com/home.jsp Select the following check-boxes: Enable Response Signing Enable Single Logout Enable Attribute Profile Include Attributes in the Response Always Click Update to save the changes. Now you will be sent back to the Service Providers page. Go to Claim configuration and select the mobile claim. Go to Local and Outbound Authentication Configuration section. Select the Advanced configuration radio button option. Add the basic authentication as first step and SMSOTP authentication as a second step. Adding basic authentication as a first step ensures that the first step of authentication will be done using the user's credentials that are configured with the WSO2 Identity Server. SMSOTP is a second step that adds another layer of authentication and security. Alternatively, federated authentication as the first step and SMSOTP authentication as the second step and click Update to save the changes.","title":"Configuring the service provider"},{"location":"docs/smsotp/2.0.15/#configuring-claims","text":"Select List under Users and Roles in the IS Management Console. Go to the User Profile and update the mobile number (This number must be registered with Nexmo, if you are using Nexmo API in order to send SMS). Note : If you wish to use the backup codes to authenticate, you need to add the following claim mentioned in Step 7 , otherwise you can leave it. 3. In the Main menu, click Add under Claims . 4. Click Add New Claim . 5. Select the Dialect from the dropdown provided and enter the required information. 6. Add the following user claims under 'http://wso2.org/claims'. a. Add the claim Uri - http://wso2.org/claims/identity/smsotp_disabled. This is an optional claim for SMSOTP. ![alt text](images/disableSmsOtp.png) b. Add the claim Uri - http://wso2.org/claims/otpbackupcodes The backup code claim is an optional. ![alt text](images/backupCodes.png) Go to Users \u2192 admin \u2192User Profile and update the Backup codes and user can disable SMS OTP by clicking \"Disable SMS OTP\".","title":"Configuring claims"},{"location":"docs/smsotp/2.0.15/#testing-the-sample","text":"To test the sample, go to the following URL: http://localhost:8080/travelocity.com Click the link to log in with SAML from WSO2 Identity Server. The basic authentication page will be visible. Use your WSO2 Identity Server credentials to sign in. You will get a token to your mobile phone.Type the code to authenticate, You will be taken to the home page of the travelocity.com app Note : In case, If you forget the mobile phone number or do not have access to it, you can use the backup codes to authenticate and you will be taken to the home page of the travelocity.com application.","title":"Testing the sample"},{"location":"docs/smsotp/2.0.16/","text":"Configuring Multi-factor Authentication using SMSOTP This topic provides instructions on how to configure the SMSOTP connector and the WSO2 Identity Server to integrate using a sample app. This is configured so that SMSOTP is a second authentication factor for the sample application. See the following sections for more information. To know more about the WSO2 Identity Server versions supported by this connector, see the WSO2 Store . This connector is supported by default from WSO2 Identity Server 5.3.0 onwards. For more information, see Configuring SMS OTP . Deploying SMSOTP artifacts Deploying travelocity.com sample Configuring the identity provider Configuring the service provider Configuring claims Testing the sample Note: If you have a older version, upgrade the connector and artifacts to the latest version from the connector store. Deploying SMSOTP artifacts The artifacts can be obtained from the store for this authenticator . 1. Place the smsotpauthenticationendpoint.war file into the /repository/deployment/server/webapps directory. 2. Place the org.wso2.carbon.extension.identity.authenticator.smsotp.connector-2.0.13.jar file into the /repository/components/dropins directory. --- **NOTE :** If you want to upgrade the SMSOTP Authenticator in your existing IS pack, please refer [upgrade instructions](https://docs.wso2.com/display/ISCONNECTORS/Authenticator+Upgrade+Instructions). --- Add the following configurations in the /repository/conf/identity/application-authentication.xml file under the section. AuthenticatorConfig name=\"SMSOTP\" enabled=\"true\" Parameter name=\"SMSOTPAuthenticationEndpointURL\" https://localhost:9443/smsotpauthenticationendpoint/smsotp.jsp /Parameter Parameter name=\"SMSOTPAuthenticationEndpointErrorPage\" https://localhost:9443/smsotpauthenticationendpoint/smsotpError.jsp /Parameter Parameter name=\"MobileNumberRegPage\" https://localhost:9443/smsotpauthenticationendpoint/mobile.jsp /Parameter Parameter name=\"RetryEnable\" true /Parameter Parameter name=\"ResendEnable\" true /Parameter Parameter name=\"BackupCode\" true /Parameter Parameter name=\"SMSOTPEnableByUserClaim\" false /Parameter Parameter name=\"SMSOTPMandatory\" false /Parameter Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" primary /Parameter Parameter name=\"CaptureAndUpdateMobileNumber\" true /Parameter Parameter name=\"SendOTPDirectlyToMobile\" false /Parameter Parameter name=\"EnableAlphanumericToken\" true /Parameter Parameter name=\"TokenExpiryTime\" 30 /Parameter Parameter name=\"TokenLength\" 8 /Parameter /AuthenticatorConfig The following table includes the definition of the parameters and the various values you can configure. Value Description SMSOTPMandatory If the value is true, the second step will be enabled by the admin. The user cannot be authenticated without SMS OTP authentication. This parameter is used for both super tenant and tenant in the configuration. The value can be true or false. screenUserAttribute If you need to show n digits of mobile number or any other user attribute value in UI, This parameter will be used to pick the claim URI. CaptureAndUpdateMobileNumber In SMSOTPMandatory case, If user forgets to update the mobile number in specific user's profile and this property is true, then user can update a mobile claim with value in authentication time (If it is first login) and get the mobile number from user's profile to send OTP. This update functionality will happen in the first login only. Once user updates the mobile number, for the next login mobile number will be taken the updated mobile number from specific user's profile. SendOTPDirectlyToMobile In SMSOTPMandatory case, If user does not exist in user store and If admin enable\"SendOTPDirectlyToMobile\" as true, then the user can enter the mobile number in authentication time in a mobile number request page and the OTP will directly send to that mobile number. BackupCode The backup code is used instead of the actual SMS code. The value can be true or false. If you do not want backup codes, set this as false. You can skip the steps 6.b and 7 in the Configuring claims section. noOfDigits The number of digits of claim value to show in UI. That is,if the mobile claim selected for the property \"screenUserAttribute\" and if the noOfDigits property has the value 4, then we can show the mobile number according to the property \"order\". If the order is backward, then we can show the last 4 digits of mobile claim in the UI. order The order whether first or last number of n digits. The possible value for this property is backward or forward. secondaryUserstore The user store configuration is maintained per tenant as comma separated values. For example, jdbc, abc, xyz . usecase This field can take one of the following values: local, association, userAttribute, subjectUri. If you do not specify any usecase, the default value is local. See below for more details. SMSOTPEnableByUserClaim This field makes it possible to disable the 'SMS OTP disabling byuser' functionality. The value can be true or false. If the value is true, the user can enable and disable the SMS OTP according to what the admin selects (SMSOTPMandatory parameter value). If this property is false, then you can skip the steps 6.a and 7 in the Configuring claims section ResendEnable This parameter makes it possible to resend the code in the same page if user applies the wrong code. This value can be true or false. EnableAlphanumericToken If the value is true, the generated token will be a alphanumeric value. Else it will generate a numeric token. TokenExpiryTime This parameter makes it possible to set the expiry time of the OTP token. TokenLength This parameter makes it possible to set the length of the OTP token. An admin can change the priority of the SMSOTP authenticator by changing the SMSOTPMandatory value (true or false). * If Admin specify that SMSOTP is mandatory ( Parameter name=\"SMSOTPMandatory\" true /Parameter ) , then you must enable SMSOTP in the user\u2019s profile by adding claim value true in order to authenticate the user. If this is not done, the SMSOTP error page appears. * If Admin specify that SMSOTP is optional ( Parameter name=\"SMSOTPMandatory\" false /Parameter ) and you enable SMSOTP in the user's profile, then the authenticator will allow the user to login with SMSOTP authentication as a second step (multi-step authentication). If Admin specifies that SMSOTP is optional and you do not enable SMSOTP in the user's profile, the SMSOTP authenticator will proceed to log the user in as the first step (basic authentication). The first step may be local authenticator (basic) or a federated authenticator (e.g., Facebook, Twitter, etc.) . In federated authenticator support in first step, the following parameters are used according to the scenario. Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" jdbc /Parameter The usecase value can be local, association, userAttribute or subjectUri. local This is based on the federated username. This is the default. You must set the federated username in the localuserstore. Basically, the federated username must be the same as the local username. association The federated username must be associated with the local account in advance in the Dashboard. So the local username is retrieved from the association. To associate the user, log into the end user dashboard and go to Associated Account by clicking View details . userAttribute The name of the federatedauthenticator's user attribute. That is,the local user namewhich is contained in a federated user's attribute. When using this, add the following parameter under the section in the /repository/conf/identity/application-authentication.xml file and put the value (e.g., email, screen_name, id, etc.). Parameter name=\"userAttribute\" email /Parameter If you use, OpenID Connect supported authenticators such as LinkedIn, Foursquare, etc., or in the case of multiple social login options as the first step and SMSOTP as secondstep , you need to add similar configuration for the specific authenticator in the /repository/conf/identity/application-authentication.xml file under the section as follows (the following shows the configuration forFoursquare,LinkedIn and Facebook authenticator respectively).Inside the AuthenticatorConfig (i.e., Foursquare), add the specific userAttribute with a prefix of the (current step) authenticator name (i.e., SMSOTP-userAttribute). AuthenticatorConfig name=\"Foursquare\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/foursquare/claims/email /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"LinkedIn\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/linkedin/claims/emailAddress /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"FacebookAuthenticator\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" email /Parameter /AuthenticatorConfig Likewise, you can add the AuthenticatorConfig forAmazon,Google,Twitterand Instagram with relevant values. subjectUri When configuring the federated authenticator, select the attribute in the subject identifier under the service provider section in UI, this is used as the username of the SMSOTP authenticator. If you use the secondary userstore, enter all the userstore values for the particular tenant as comma separated values. The user store configuration is maintained per tenant: * If you use a super tenant, put all the parameter values into the IS_HOME /repository/conf/identity/application-authentication.xml file under the AuthenticatorConfigs section. * If you use a tenant, upload the same XML file (application-authentication.xml) into a specific registry location (/_system/governance/SMSOTP). Create the collection named SMSOTP, add the resource and upload the application-authentication.xml file into theregistry). While doing the authentication, first it checks whether there is an XML file uploaded to the registry. If that is so, it reads it from the registry but does not take the local file. If there is no file in the registry, then it only takes the property values from the local file. This is how theuserstore configuration is maintained per tenant. You can use the registry or local file to get the property values. If you need to show last n digits of mobile number or any other user attribute value in UI, the following parameters can be used according to the scenario. For example, we can use the following parameters to get last 4 digits from mobile number. Parameter name=\"screenUserAttribute\" http://wso2.org/claims/mobile /Parameter Parameter name=\"noOfDigits\" 4 /Parameter Parameter name=\"order\" backward /Parameter The SMS provider is the entity that is used to send the SMS. The SMSOTP connector has been configured such that it can be used with most types of SMS APIs. Some use the GET method with the client secret and API Key encoded in the URL (e.g., Nexmo), while some may use the POST method when sending the values in the headers and the message and telephone number in the payload (e.g., Clickatell). Note that this could change significantly between different SMS providers. The configuration of the connector in the identity provider would also change based on this. Deploying travelocity.com sample The next step is to deploy the sample app in order to use it in this scenario. Once this is done, the next step is to configure the WSO2 Identity Server by adding an identity provider and a service provider . Configuring the identity provider Now you have to configure WSO2 Identity Server by adding a new identity provider . Download the WSO2 Identity Server from here and run it . Download the certificate of the SMS provider. Go to the link (eg:- https://www.nexmo.com) in your browser, and then click the HTTPS trust icon on the address bar (e.g., the padlock next to the URL in Chrome) Import that certificate into the IS client keystore. keytool -importcert -file -keystore /repository/resources/security/client-truststore.jks -alias \"Nexmo\" Default client-truststore.jks password is \"wso2carbon\" Log into the management console as an administrator. In the Identity section under the Main tab of the management console , click Add under Identity Providers . Give a suitable name (e.g., SMSOTP) as the Identity Provider Name . Go to the SMSOTP Configuration under Federated Authenticators . Select both checkboxes to Enable SMSOTP Authenticator and make it the Default . Enter the SMS URL and the HTTP Method used (e.g., GET or POST). Include the headers and payload if the API uses any. If the text message and the phone number are passed as parameters in any field, then include them as $ctx.num and $ctx.msg respectively. You must also enter the HTTP Response Code the SMS service provider sends when the API is successfully called. Nexmo API and Bulksms API send 200 as the code, while Clickatell and Plivo send 202. If this value is unknown, leave it blank and the connector checks if the response is 200, 201 or 202. Note : If Nexmo is used as the SMS provider, * Go to https://dashboard.nexmo.com/sign-up and click free signup and register. * Under API Settings in Settings , copy and save the API key and Secret. * The Nexmo API requires the parameters to be encoded in the URL, so the SMS URL would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://rest.nexmo.com/sms/json?api_key=#### api_secret=##### from=NEXMO to= $ctx.num text= $ctx.msg | | **HTTP Method** | GET | Note : If Clickatell is used as the SMS provider, * Go to https://secure.clickatell.com/#/login and create an account. * The auth token is provided when you register with Clickatell. * Clickatell uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.clickatell.com/rest/message | | **HTTP Method** | POST | | **HTTP Headers** | X-Version: 1,Authorization: bearer ####,Accept: application/json,Content-Type: application/json | | **HTTP Payload** | {\"text\":\" $ctx.msg \",\"to\":[\" $ctx.num \"]} | Note : If Plivo is used as the SMS provider, * Sign up for a free Plivo trial account . * Phone numbers must be verified at the Sandbox Numbers page (add at least two numbers and verify them). * The Plivo API is authenticated with Basic Auth using your AUTH ID and AUTH TOKEN, Your Plivo AUTH ID and AUTH TOKEN can be found when you log in to your dashboard . * Plivo uses a POST method with headers, and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.plivo.com/v1/Account/{auth_id}/Message/ | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic ####, Content-Type: application/json | | **HTTP Payload** | {\"src\":\"+94#######\",\"dst\":\"$ctx.num\",\"text\":\"$ctx.msg\"} | Note : If Bulksms is used as the SMS provider, * Go to https://www2.bulksms.com/login.mc and create an account. * While registering the account, verify your mobile number and click Claim to get free credits. ![alt text](images/bulkSms.png) Bulksms API authentication is performed by providing username and password request parameters. Bulksms uses a POST method and the required parameters are to be encoded in the URL. So the fields would be as follows. SMS URL https://bulksms.vsms.net/eapi/submission/send_sms/2/2.0?username=####### password=##### message=$ctx.msg msisdn=$ctx.num HTTP Method POST HTTP Headers Content-Type: application/x-www-form-urlencoded Note : If Twilio is used as the SMS provider, * Go to https://www.twilio.com/try-twilio and create an account. * While registering the account, verify your mobile number and click on console home https://www.twilio.com/console to get free credits (Account SID and Auth Token) . * Twilio uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.twilio.com/2010-04-01/Accounts/{AccountSID}/SMS/Messages.json | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic base64{AccountSID:AuthToken} | | **HTTP Payload** | Body=$ctx.msg To=$ctx.num From={FROM_NUM} | Click Update and you have now added and configured the Identity provider. Configuring the service provider Return to the management console. In the Identity section under the Main tab, click Add under Service Providers . Enter travelocity.com in the Service Provider Name text box and click Register . In the Inbound Authentication Configuration section, click Configure under the SAML2 Web SSO Configuration section. Now set the configuration as follows: Issuer : travelocity.com Assertion Consumer URL : http://localhost:8080/travelocity.com/home.jsp Select the following check-boxes: Enable Response Signing Enable Single Logout Enable Attribute Profile Include Attributes in the Response Always Click Update to save the changes. Now you will be sent back to the Service Providers page. Go to Claim configuration and select the mobile claim. Go to Local and Outbound Authentication Configuration section. Select the Advanced configuration radio button option. Add the basic authentication as first step and SMSOTP authentication as a second step. Adding basic authentication as a first step ensures that the first step of authentication will be done using the user's credentials that are configured with the WSO2 Identity Server. SMSOTP is a second step that adds another layer of authentication and security. Alternatively, federated authentication as the first step and SMSOTP authentication as the second step and click Update to save the changes. Configuring claims Select List under Users and Roles in the IS Management Console. Go to the User Profile and update the mobile number (This number must be registered with Nexmo, if you are using Nexmo API in order to send SMS). Note : If you wish to use the backup codes to authenticate, you need to add the following claim mentioned in Step 7 , otherwise you can leave it. 3. In the Main menu, click Add under Claims . 4. Click Add New Claim . 5. Select the Dialect from the dropdown provided and enter the required information. 6. Add the following user claims under 'http://wso2.org/claims'. a. Add the claim Uri - http://wso2.org/claims/identity/smsotp_disabled. This is an optional claim for SMSOTP. ![alt text](images/disableSmsOtp.png) b. Add the claim Uri - http://wso2.org/claims/otpbackupcodes The backup code claim is an optional. ![alt text](images/backupCodes.png) Go to Users \u2192 admin \u2192User Profile and update the Backup codes and user can disable SMS OTP by clicking \"Disable SMS OTP\". Testing the sample To test the sample, go to the following URL: http://localhost:8080/travelocity.com Click the link to log in with SAML from WSO2 Identity Server. The basic authentication page will be visible. Use your WSO2 Identity Server credentials to sign in. You will get a token to your mobile phone.Type the code to authenticate, You will be taken to the home page of the travelocity.com app Note : In case, If you forget the mobile phone number or do not have access to it, you can use the backup codes to authenticate and you will be taken to the home page of the travelocity.com application.","title":"Configuring Multi-factor Authentication using SMSOTP"},{"location":"docs/smsotp/2.0.16/#configuring-multi-factor-authentication-using-smsotp","text":"This topic provides instructions on how to configure the SMSOTP connector and the WSO2 Identity Server to integrate using a sample app. This is configured so that SMSOTP is a second authentication factor for the sample application. See the following sections for more information. To know more about the WSO2 Identity Server versions supported by this connector, see the WSO2 Store . This connector is supported by default from WSO2 Identity Server 5.3.0 onwards. For more information, see Configuring SMS OTP . Deploying SMSOTP artifacts Deploying travelocity.com sample Configuring the identity provider Configuring the service provider Configuring claims Testing the sample Note: If you have a older version, upgrade the connector and artifacts to the latest version from the connector store.","title":"Configuring Multi-factor Authentication using SMSOTP"},{"location":"docs/smsotp/2.0.16/#deploying-smsotp-artifacts","text":"The artifacts can be obtained from the store for this authenticator . 1. Place the smsotpauthenticationendpoint.war file into the /repository/deployment/server/webapps directory. 2. Place the org.wso2.carbon.extension.identity.authenticator.smsotp.connector-2.0.13.jar file into the /repository/components/dropins directory. --- **NOTE :** If you want to upgrade the SMSOTP Authenticator in your existing IS pack, please refer [upgrade instructions](https://docs.wso2.com/display/ISCONNECTORS/Authenticator+Upgrade+Instructions). --- Add the following configurations in the /repository/conf/identity/application-authentication.xml file under the section. AuthenticatorConfig name=\"SMSOTP\" enabled=\"true\" Parameter name=\"SMSOTPAuthenticationEndpointURL\" https://localhost:9443/smsotpauthenticationendpoint/smsotp.jsp /Parameter Parameter name=\"SMSOTPAuthenticationEndpointErrorPage\" https://localhost:9443/smsotpauthenticationendpoint/smsotpError.jsp /Parameter Parameter name=\"MobileNumberRegPage\" https://localhost:9443/smsotpauthenticationendpoint/mobile.jsp /Parameter Parameter name=\"RetryEnable\" true /Parameter Parameter name=\"ResendEnable\" true /Parameter Parameter name=\"BackupCode\" true /Parameter Parameter name=\"SMSOTPEnableByUserClaim\" false /Parameter Parameter name=\"SMSOTPMandatory\" false /Parameter Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" primary /Parameter Parameter name=\"CaptureAndUpdateMobileNumber\" true /Parameter Parameter name=\"SendOTPDirectlyToMobile\" false /Parameter Parameter name=\"EnableAlphanumericToken\" true /Parameter Parameter name=\"TokenExpiryTime\" 30 /Parameter Parameter name=\"TokenLength\" 8 /Parameter /AuthenticatorConfig The following table includes the definition of the parameters and the various values you can configure. Value Description SMSOTPMandatory If the value is true, the second step will be enabled by the admin. The user cannot be authenticated without SMS OTP authentication. This parameter is used for both super tenant and tenant in the configuration. The value can be true or false. screenUserAttribute If you need to show n digits of mobile number or any other user attribute value in UI, This parameter will be used to pick the claim URI. CaptureAndUpdateMobileNumber In SMSOTPMandatory case, If user forgets to update the mobile number in specific user's profile and this property is true, then user can update a mobile claim with value in authentication time (If it is first login) and get the mobile number from user's profile to send OTP. This update functionality will happen in the first login only. Once user updates the mobile number, for the next login mobile number will be taken the updated mobile number from specific user's profile. SendOTPDirectlyToMobile In SMSOTPMandatory case, If user does not exist in user store and If admin enable\"SendOTPDirectlyToMobile\" as true, then the user can enter the mobile number in authentication time in a mobile number request page and the OTP will directly send to that mobile number. BackupCode The backup code is used instead of the actual SMS code. The value can be true or false. If you do not want backup codes, set this as false. You can skip the steps 6.b and 7 in the Configuring claims section. noOfDigits The number of digits of claim value to show in UI. That is,if the mobile claim selected for the property \"screenUserAttribute\" and if the noOfDigits property has the value 4, then we can show the mobile number according to the property \"order\". If the order is backward, then we can show the last 4 digits of mobile claim in the UI. order The order whether first or last number of n digits. The possible value for this property is backward or forward. secondaryUserstore The user store configuration is maintained per tenant as comma separated values. For example, jdbc, abc, xyz . usecase This field can take one of the following values: local, association, userAttribute, subjectUri. If you do not specify any usecase, the default value is local. See below for more details. SMSOTPEnableByUserClaim This field makes it possible to disable the 'SMS OTP disabling byuser' functionality. The value can be true or false. If the value is true, the user can enable and disable the SMS OTP according to what the admin selects (SMSOTPMandatory parameter value). If this property is false, then you can skip the steps 6.a and 7 in the Configuring claims section ResendEnable This parameter makes it possible to resend the code in the same page if user applies the wrong code. This value can be true or false. EnableAlphanumericToken If the value is true, the generated token will be a alphanumeric value. Else it will generate a numeric token. TokenExpiryTime This parameter makes it possible to set the expiry time of the OTP token. TokenLength This parameter makes it possible to set the length of the OTP token. An admin can change the priority of the SMSOTP authenticator by changing the SMSOTPMandatory value (true or false). * If Admin specify that SMSOTP is mandatory ( Parameter name=\"SMSOTPMandatory\" true /Parameter ) , then you must enable SMSOTP in the user\u2019s profile by adding claim value true in order to authenticate the user. If this is not done, the SMSOTP error page appears. * If Admin specify that SMSOTP is optional ( Parameter name=\"SMSOTPMandatory\" false /Parameter ) and you enable SMSOTP in the user's profile, then the authenticator will allow the user to login with SMSOTP authentication as a second step (multi-step authentication). If Admin specifies that SMSOTP is optional and you do not enable SMSOTP in the user's profile, the SMSOTP authenticator will proceed to log the user in as the first step (basic authentication). The first step may be local authenticator (basic) or a federated authenticator (e.g., Facebook, Twitter, etc.) . In federated authenticator support in first step, the following parameters are used according to the scenario. Parameter name=\"usecase\" association /Parameter Parameter name=\"secondaryUserstore\" jdbc /Parameter The usecase value can be local, association, userAttribute or subjectUri. local This is based on the federated username. This is the default. You must set the federated username in the localuserstore. Basically, the federated username must be the same as the local username. association The federated username must be associated with the local account in advance in the Dashboard. So the local username is retrieved from the association. To associate the user, log into the end user dashboard and go to Associated Account by clicking View details . userAttribute The name of the federatedauthenticator's user attribute. That is,the local user namewhich is contained in a federated user's attribute. When using this, add the following parameter under the section in the /repository/conf/identity/application-authentication.xml file and put the value (e.g., email, screen_name, id, etc.). Parameter name=\"userAttribute\" email /Parameter If you use, OpenID Connect supported authenticators such as LinkedIn, Foursquare, etc., or in the case of multiple social login options as the first step and SMSOTP as secondstep , you need to add similar configuration for the specific authenticator in the /repository/conf/identity/application-authentication.xml file under the section as follows (the following shows the configuration forFoursquare,LinkedIn and Facebook authenticator respectively).Inside the AuthenticatorConfig (i.e., Foursquare), add the specific userAttribute with a prefix of the (current step) authenticator name (i.e., SMSOTP-userAttribute). AuthenticatorConfig name=\"Foursquare\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/foursquare/claims/email /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"LinkedIn\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" http://wso2.org/linkedin/claims/emailAddress /Parameter /AuthenticatorConfig AuthenticatorConfig name=\"FacebookAuthenticator\" enabled=\"true\" Parameter name=\"SMSOTP-userAttribute\" email /Parameter /AuthenticatorConfig Likewise, you can add the AuthenticatorConfig forAmazon,Google,Twitterand Instagram with relevant values. subjectUri When configuring the federated authenticator, select the attribute in the subject identifier under the service provider section in UI, this is used as the username of the SMSOTP authenticator. If you use the secondary userstore, enter all the userstore values for the particular tenant as comma separated values. The user store configuration is maintained per tenant: * If you use a super tenant, put all the parameter values into the IS_HOME /repository/conf/identity/application-authentication.xml file under the AuthenticatorConfigs section. * If you use a tenant, upload the same XML file (application-authentication.xml) into a specific registry location (/_system/governance/SMSOTP). Create the collection named SMSOTP, add the resource and upload the application-authentication.xml file into theregistry). While doing the authentication, first it checks whether there is an XML file uploaded to the registry. If that is so, it reads it from the registry but does not take the local file. If there is no file in the registry, then it only takes the property values from the local file. This is how theuserstore configuration is maintained per tenant. You can use the registry or local file to get the property values. If you need to show last n digits of mobile number or any other user attribute value in UI, the following parameters can be used according to the scenario. For example, we can use the following parameters to get last 4 digits from mobile number. Parameter name=\"screenUserAttribute\" http://wso2.org/claims/mobile /Parameter Parameter name=\"noOfDigits\" 4 /Parameter Parameter name=\"order\" backward /Parameter The SMS provider is the entity that is used to send the SMS. The SMSOTP connector has been configured such that it can be used with most types of SMS APIs. Some use the GET method with the client secret and API Key encoded in the URL (e.g., Nexmo), while some may use the POST method when sending the values in the headers and the message and telephone number in the payload (e.g., Clickatell). Note that this could change significantly between different SMS providers. The configuration of the connector in the identity provider would also change based on this.","title":"Deploying SMSOTP artifacts"},{"location":"docs/smsotp/2.0.16/#deploying-travelocitycom-sample","text":"The next step is to deploy the sample app in order to use it in this scenario. Once this is done, the next step is to configure the WSO2 Identity Server by adding an identity provider and a service provider .","title":"Deploying travelocity.com sample"},{"location":"docs/smsotp/2.0.16/#configuring-the-identity-provider","text":"Now you have to configure WSO2 Identity Server by adding a new identity provider . Download the WSO2 Identity Server from here and run it . Download the certificate of the SMS provider. Go to the link (eg:- https://www.nexmo.com) in your browser, and then click the HTTPS trust icon on the address bar (e.g., the padlock next to the URL in Chrome) Import that certificate into the IS client keystore. keytool -importcert -file -keystore /repository/resources/security/client-truststore.jks -alias \"Nexmo\" Default client-truststore.jks password is \"wso2carbon\" Log into the management console as an administrator. In the Identity section under the Main tab of the management console , click Add under Identity Providers . Give a suitable name (e.g., SMSOTP) as the Identity Provider Name . Go to the SMSOTP Configuration under Federated Authenticators . Select both checkboxes to Enable SMSOTP Authenticator and make it the Default . Enter the SMS URL and the HTTP Method used (e.g., GET or POST). Include the headers and payload if the API uses any. If the text message and the phone number are passed as parameters in any field, then include them as $ctx.num and $ctx.msg respectively. You must also enter the HTTP Response Code the SMS service provider sends when the API is successfully called. Nexmo API and Bulksms API send 200 as the code, while Clickatell and Plivo send 202. If this value is unknown, leave it blank and the connector checks if the response is 200, 201 or 202. Note : If Nexmo is used as the SMS provider, * Go to https://dashboard.nexmo.com/sign-up and click free signup and register. * Under API Settings in Settings , copy and save the API key and Secret. * The Nexmo API requires the parameters to be encoded in the URL, so the SMS URL would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://rest.nexmo.com/sms/json?api_key=#### api_secret=##### from=NEXMO to= $ctx.num text= $ctx.msg | | **HTTP Method** | GET | Note : If Clickatell is used as the SMS provider, * Go to https://secure.clickatell.com/#/login and create an account. * The auth token is provided when you register with Clickatell. * Clickatell uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.clickatell.com/rest/message | | **HTTP Method** | POST | | **HTTP Headers** | X-Version: 1,Authorization: bearer ####,Accept: application/json,Content-Type: application/json | | **HTTP Payload** | {\"text\":\" $ctx.msg \",\"to\":[\" $ctx.num \"]} | Note : If Plivo is used as the SMS provider, * Sign up for a free Plivo trial account . * Phone numbers must be verified at the Sandbox Numbers page (add at least two numbers and verify them). * The Plivo API is authenticated with Basic Auth using your AUTH ID and AUTH TOKEN, Your Plivo AUTH ID and AUTH TOKEN can be found when you log in to your dashboard . * Plivo uses a POST method with headers, and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.plivo.com/v1/Account/{auth_id}/Message/ | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic ####, Content-Type: application/json | | **HTTP Payload** | {\"src\":\"+94#######\",\"dst\":\"$ctx.num\",\"text\":\"$ctx.msg\"} | Note : If Bulksms is used as the SMS provider, * Go to https://www2.bulksms.com/login.mc and create an account. * While registering the account, verify your mobile number and click Claim to get free credits. ![alt text](images/bulkSms.png) Bulksms API authentication is performed by providing username and password request parameters. Bulksms uses a POST method and the required parameters are to be encoded in the URL. So the fields would be as follows. SMS URL https://bulksms.vsms.net/eapi/submission/send_sms/2/2.0?username=####### password=##### message=$ctx.msg msisdn=$ctx.num HTTP Method POST HTTP Headers Content-Type: application/x-www-form-urlencoded Note : If Twilio is used as the SMS provider, * Go to https://www.twilio.com/try-twilio and create an account. * While registering the account, verify your mobile number and click on console home https://www.twilio.com/console to get free credits (Account SID and Auth Token) . * Twilio uses a POST method with headers and the text message and phone number are sent as the payload. So the fields would be as follows. | | | | ------------- |-------------| | **SMS URL** | https://api.twilio.com/2010-04-01/Accounts/{AccountSID}/SMS/Messages.json | | **HTTP Method** | POST | | **HTTP Headers** | Authorization: Basic base64{AccountSID:AuthToken} | | **HTTP Payload** | Body=$ctx.msg To=$ctx.num From={FROM_NUM} | Click Update and you have now added and configured the Identity provider.","title":"Configuring the identity provider"},{"location":"docs/smsotp/2.0.16/#configuring-the-service-provider","text":"Return to the management console. In the Identity section under the Main tab, click Add under Service Providers . Enter travelocity.com in the Service Provider Name text box and click Register . In the Inbound Authentication Configuration section, click Configure under the SAML2 Web SSO Configuration section. Now set the configuration as follows: Issuer : travelocity.com Assertion Consumer URL : http://localhost:8080/travelocity.com/home.jsp Select the following check-boxes: Enable Response Signing Enable Single Logout Enable Attribute Profile Include Attributes in the Response Always Click Update to save the changes. Now you will be sent back to the Service Providers page. Go to Claim configuration and select the mobile claim. Go to Local and Outbound Authentication Configuration section. Select the Advanced configuration radio button option. Add the basic authentication as first step and SMSOTP authentication as a second step. Adding basic authentication as a first step ensures that the first step of authentication will be done using the user's credentials that are configured with the WSO2 Identity Server. SMSOTP is a second step that adds another layer of authentication and security. Alternatively, federated authentication as the first step and SMSOTP authentication as the second step and click Update to save the changes.","title":"Configuring the service provider"},{"location":"docs/smsotp/2.0.16/#configuring-claims","text":"Select List under Users and Roles in the IS Management Console. Go to the User Profile and update the mobile number (This number must be registered with Nexmo, if you are using Nexmo API in order to send SMS). Note : If you wish to use the backup codes to authenticate, you need to add the following claim mentioned in Step 7 , otherwise you can leave it. 3. In the Main menu, click Add under Claims . 4. Click Add New Claim . 5. Select the Dialect from the dropdown provided and enter the required information. 6. Add the following user claims under 'http://wso2.org/claims'. a. Add the claim Uri - http://wso2.org/claims/identity/smsotp_disabled. This is an optional claim for SMSOTP. ![alt text](images/disableSmsOtp.png) b. Add the claim Uri - http://wso2.org/claims/otpbackupcodes The backup code claim is an optional. ![alt text](images/backupCodes.png) Go to Users \u2192 admin \u2192User Profile and update the Backup codes and user can disable SMS OTP by clicking \"Disable SMS OTP\".","title":"Configuring claims"},{"location":"docs/smsotp/2.0.16/#testing-the-sample","text":"To test the sample, go to the following URL: http://localhost:8080/travelocity.com Click the link to log in with SAML from WSO2 Identity Server. The basic authentication page will be visible. Use your WSO2 Identity Server credentials to sign in. You will get a token to your mobile phone.Type the code to authenticate, You will be taken to the home page of the travelocity.com app Note : In case, If you forget the mobile phone number or do not have access to it, you can use the backup codes to authenticate and you will be taken to the home page of the travelocity.com application.","title":"Testing the sample"},{"location":"docs/smsotp/deploying_the_sample_app/","text":"Deploying the Sample App This topic provides instructions on how to deploy the sample application (travelocity). You can download the travelocity.com.war file from here or you can build the latest travelocity application from here . Deploy this sample web app on a web container. Use the Apache Tomcat server to do this. If you have not downloaded Apache Tomcat already, download it from here . Tip: Since this sample is written based on Servlet 3.0, it needs to be deployed on Tomcat 7.x. * Copy the .war file into the webapps folder. For example, /apache-tomcat-\\ /webapps. 3. Start the Tomcat server. To check the sample application, navigate to http:// : /travelocity.com/index.jsp on your browser. For example, http://localhost:8080/travelocity.com/index.jsp. Note: It is recommended that you use a hostname that is not localhost to avoid browser errors. Modify the /etc/hosts entry in your machine to reflect this. Note that localhost is used throughout thisdocumentation as an example, but you must modify this when configuring these authenticators or connectors with this sample application.","title":"Deploying the sample app"},{"location":"docs/smsotp/deploying_the_sample_app/#deploying-the-sample-app","text":"This topic provides instructions on how to deploy the sample application (travelocity). You can download the travelocity.com.war file from here or you can build the latest travelocity application from here . Deploy this sample web app on a web container. Use the Apache Tomcat server to do this. If you have not downloaded Apache Tomcat already, download it from here . Tip: Since this sample is written based on Servlet 3.0, it needs to be deployed on Tomcat 7.x. * Copy the .war file into the webapps folder. For example, /apache-tomcat-\\ /webapps. 3. Start the Tomcat server. To check the sample application, navigate to http:// : /travelocity.com/index.jsp on your browser. For example, http://localhost:8080/travelocity.com/index.jsp. Note: It is recommended that you use a hostname that is not localhost to avoid browser errors. Modify the /etc/hosts entry in your machine to reflect this. Note that localhost is used throughout thisdocumentation as an example, but you must modify this when configuring these authenticators or connectors with this sample application.","title":"Deploying the Sample App"}]}